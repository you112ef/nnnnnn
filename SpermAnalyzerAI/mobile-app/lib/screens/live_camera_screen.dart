import 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:camera/camera.dart';\nimport '../services/camera_service.dart';\nimport '../services/localization_service.dart';\nimport '../services/analysis_service.dart';\nimport '../widgets/custom_button.dart';\nimport '../widgets/progress_indicator.dart';\nimport '../utils/app_constants.dart';\nimport '../utils/app_theme.dart';\n\nclass LiveCameraScreen extends ConsumerStatefulWidget {\n  const LiveCameraScreen({super.key});\n\n  @override\n  ConsumerState<LiveCameraScreen> createState() => _LiveCameraScreenState();\n}\n\nclass _LiveCameraScreenState extends ConsumerState<LiveCameraScreen>\n    with TickerProviderStateMixin {\n  late AnimationController _overlayController;\n  late AnimationController _zoomController;\n  \n  bool _showControls = true;\n  bool _showSettings = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    _overlayController = AnimationController(\n      duration: const Duration(milliseconds: 300),\n      vsync: this,\n    );\n    \n    _zoomController = AnimationController(\n      duration: const Duration(milliseconds: 200),\n      vsync: this,\n    );\n    \n    // تهيئة الكاميرا\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      ref.read(cameraServiceProvider.notifier).initialize();\n    });\n  }\n  \n  @override\n  void dispose() {\n    _overlayController.dispose();\n    _zoomController.dispose();\n    super.dispose();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final cameraState = ref.watch(cameraServiceProvider);\n    final loc = AppLocalizations.of(context);\n    \n    return Scaffold(\n      backgroundColor: Colors.black,\n      body: SafeArea(\n        child: Stack(\n          children: [\n            // معاينة الكاميرا\n            _buildCameraPreview(cameraState),\n            \n            // طبقة المعلومات والتحكم\n            if (_showControls) _buildControlsOverlay(cameraState, loc),\n            \n            // طبقة الإعدادات\n            if (_showSettings) _buildSettingsOverlay(cameraState, loc),\n            \n            // طبقة التحليل المباشر\n            if (cameraState.isLiveAnalysisEnabled && cameraState.liveAnalysisResult != null)\n              _buildAnalysisOverlay(cameraState),\n            \n            // شريط الأدوات العلوي\n            _buildTopToolbar(cameraState, loc),\n            \n            // شريط الأدوات السفلي\n            _buildBottomToolbar(cameraState, loc),\n          ],\n        ),\n      ),\n    );\n  }\n  \n  // معاينة الكاميرا\n  Widget _buildCameraPreview(CameraServiceState cameraState) {\n    if (cameraState.state == CameraState.notInitialized ||\n        cameraState.state == CameraState.initializing) {\n      return const Center(\n        child: CustomProgressIndicator(\n          message: 'جاري تهيئة الكاميرا...',\n        ),\n      );\n    }\n    \n    if (cameraState.hasError) {\n      return Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            const Icon(\n              Icons.error_outline,\n              size: 64,\n              color: AppConstants.errorColor,\n            ),\n            const SizedBox(height: 16),\n            Text(\n              cameraState.errorMessage ?? 'خطأ في الكاميرا',\n              style: const TextStyle(color: Colors.white),\n              textAlign: TextAlign.center,\n            ),\n            const SizedBox(height: 16),\n            CustomButton.elevated(\n              text: 'إعادة المحاولة',\n              onPressed: () {\n                ref.read(cameraServiceProvider.notifier).initialize();\n              },\n            ),\n          ],\n        ),\n      );\n    }\n    \n    if (!cameraState.isReady || cameraState.controller == null) {\n      return const Center(\n        child: CircularProgressIndicator(color: AppConstants.accentColor),\n      );\n    }\n    \n    return GestureDetector(\n      onTap: _toggleControlsVisibility,\n      onScaleStart: (details) {\n        _zoomController.forward();\n      },\n      onScaleUpdate: (details) {\n        final newZoom = cameraState.currentZoom * details.scale;\n        ref.read(cameraServiceProvider.notifier).setZoom(newZoom);\n      },\n      onScaleEnd: (details) {\n        _zoomController.reverse();\n      },\n      onTapDown: (details) {\n        final renderBox = context.findRenderObject() as RenderBox;\n        final localPosition = renderBox.globalToLocal(details.globalPosition);\n        final cameraPreviewSize = renderBox.size;\n        \n        // تحويل الإحداثيات إلى نسبة\n        final focusPoint = Offset(\n          localPosition.dx / cameraPreviewSize.width,\n          localPosition.dy / cameraPreviewSize.height,\n        );\n        \n        ref.read(cameraServiceProvider.notifier).focusOnPoint(focusPoint);\n        _showFocusIndicator(localPosition);\n      },\n      child: ClipRect(\n        child: Transform.scale(\n          scale: 1.0,\n          child: Center(\n            child: CameraPreview(cameraState.controller!),\n          ),\n        ),\n      ),\n    );\n  }\n  \n  // شريط الأدوات العلوي\n  Widget _buildTopToolbar(CameraServiceState cameraState, AppLocalizations loc) {\n    return Positioned(\n      top: 0,\n      left: 0,\n      right: 0,\n      child: AnimatedOpacity(\n        opacity: _showControls ? 1.0 : 0.0,\n        duration: const Duration(milliseconds: 300),\n        child: Container(\n          padding: const EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              begin: Alignment.topCenter,\n              end: Alignment.bottomCenter,\n              colors: [\n                Colors.black.withOpacity(0.7),\n                Colors.transparent,\n              ],\n            ),\n          ),\n          child: Row(\n            children: [\n              // زر الرجوع\n              IconButton(\n                icon: const Icon(Icons.arrow_back, color: Colors.white),\n                onPressed: () => Navigator.of(context).pop(),\n              ),\n              \n              const Spacer(),\n              \n              // مؤشر التحليل المباشر\n              if (cameraState.isLiveAnalysisEnabled)\n                Container(\n                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n                  decoration: BoxDecoration(\n                    color: AppConstants.successColor,\n                    borderRadius: BorderRadius.circular(20),\n                  ),\n                  child: Row(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      const Icon(Icons.analytics, color: Colors.white, size: 16),\n                      const SizedBox(width: 4),\n                      Text(\n                        loc.analyzing,\n                        style: const TextStyle(color: Colors.white, fontSize: 12),\n                      ),\n                    ],\n                  ),\n                ),\n              \n              const SizedBox(width: 8),\n              \n              // زر الإعدادات\n              IconButton(\n                icon: Icon(\n                  _showSettings ? Icons.close : Icons.settings,\n                  color: Colors.white,\n                ),\n                onPressed: () {\n                  setState(() {\n                    _showSettings = !_showSettings;\n                  });\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n  \n  // شريط الأدوات السفلي\n  Widget _buildBottomToolbar(CameraServiceState cameraState, AppLocalizations loc) {\n    return Positioned(\n      bottom: 0,\n      left: 0,\n      right: 0,\n      child: AnimatedOpacity(\n        opacity: _showControls ? 1.0 : 0.0,\n        duration: const Duration(milliseconds: 300),\n        child: Container(\n          padding: const EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              begin: Alignment.bottomCenter,\n              end: Alignment.topCenter,\n              colors: [\n                Colors.black.withOpacity(0.8),\n                Colors.transparent,\n              ],\n            ),\n          ),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              // مؤشر التكبير\n              if (cameraState.currentZoom > 1.1)\n                Container(\n                  margin: const EdgeInsets.only(bottom: 16),\n                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n                  decoration: BoxDecoration(\n                    color: Colors.black.withOpacity(0.5),\n                    borderRadius: BorderRadius.circular(20),\n                  ),\n                  child: Text(\n                    '${cameraState.currentZoom.toStringAsFixed(1)}x',\n                    style: const TextStyle(color: Colors.white),\n                  ),\n                ),\n              \n              // عدد وقت التسجيل\n              if (cameraState.isRecording)\n                Container(\n                  margin: const EdgeInsets.only(bottom: 16),\n                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n                  decoration: BoxDecoration(\n                    color: AppConstants.errorColor,\n                    borderRadius: BorderRadius.circular(20),\n                  ),\n                  child: Row(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      const Icon(Icons.fiber_manual_record, color: Colors.white, size: 16),\n                      const SizedBox(width: 4),\n                      Text(\n                        _formatDuration(cameraState.recordingDuration),\n                        style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),\n                      ),\n                    ],\n                  ),\n                ),\n              \n              // أزرار التحكم\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                children: [\n                  // تبديل الفلاش\n                  _buildControlButton(\n                    icon: cameraState.isFlashOn ? Icons.flash_on : Icons.flash_off,\n                    isActive: cameraState.isFlashOn,\n                    onPressed: () {\n                      ref.read(cameraServiceProvider.notifier).toggleFlash();\n                    },\n                  ),\n                  \n                  // زر التصوير/التسجيل\n                  GestureDetector(\n                    onTap: _takePicture,\n                    onLongPress: _startVideoRecording,\n                    onLongPressUp: _stopVideoRecording,\n                    child: Container(\n                      width: 80,\n                      height: 80,\n                      decoration: BoxDecoration(\n                        shape: BoxShape.circle,\n                        border: Border.all(\n                          color: Colors.white,\n                          width: 4,\n                        ),\n                      ),\n                      child: Container(\n                        margin: const EdgeInsets.all(6),\n                        decoration: BoxDecoration(\n                          shape: BoxShape.circle,\n                          color: cameraState.isRecording \n                              ? AppConstants.errorColor \n                              : Colors.white,\n                        ),\n                        child: cameraState.isRecording\n                            ? const Icon(Icons.stop, color: Colors.white, size: 32)\n                            : null,\n                      ),\n                    ),\n                  ),\n                  \n                  // تبديل الكاميرا\n                  _buildControlButton(\n                    icon: Icons.flip_camera_ios,\n                    onPressed: cameraState.hasMultipleCameras\n                        ? () => ref.read(cameraServiceProvider.notifier).switchCamera()\n                        : null,\n                  ),\n                ],\n              ),\n              \n              const SizedBox(height: 8),\n              \n              // زر التحليل المباشر\n              CustomButton.elevated(\n                text: cameraState.isLiveAnalysisEnabled \n                    ? 'إيقاف التحليل المباشر' \n                    : 'تفعيل التحليل المباشر',\n                backgroundColor: cameraState.isLiveAnalysisEnabled \n                    ? AppConstants.warningColor \n                    : AppConstants.successColor,\n                onPressed: () {\n                  ref.read(cameraServiceProvider.notifier).toggleLiveAnalysis();\n                },\n                icon: cameraState.isLiveAnalysisEnabled \n                    ? Icons.stop \n                    : Icons.play_arrow,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n  \n  // زر تحكم\n  Widget _buildControlButton({\n    required IconData icon,\n    VoidCallback? onPressed,\n    bool isActive = false,\n  }) {\n    return Container(\n      width: 56,\n      height: 56,\n      decoration: BoxDecoration(\n        shape: BoxShape.circle,\n        color: isActive \n            ? AppConstants.accentColor \n            : Colors.black.withOpacity(0.5),\n        border: Border.all(\n          color: Colors.white.withOpacity(0.3),\n          width: 1,\n        ),\n      ),\n      child: IconButton(\n        icon: Icon(\n          icon,\n          color: Colors.white,\n          size: 24,\n        ),\n        onPressed: onPressed,\n      ),\n    );\n  }\n  \n  // طبقة الإعدادات\n  Widget _buildSettingsOverlay(CameraServiceState cameraState, AppLocalizations loc) {\n    return Positioned(\n      top: 80,\n      right: 16,\n      child: AnimatedOpacity(\n        opacity: _showSettings ? 1.0 : 0.0,\n        duration: const Duration(milliseconds: 300),\n        child: Container(\n          width: 200,\n          padding: const EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            color: Colors.black.withOpacity(0.8),\n            borderRadius: BorderRadius.circular(12),\n            border: Border.all(\n              color: Colors.white.withOpacity(0.2),\n              width: 1,\n            ),\n          ),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              Text(\n                loc.cameraSettings,\n                style: const TextStyle(\n                  color: Colors.white,\n                  fontSize: 16,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n              const SizedBox(height: 16),\n              \n              // شريط تمرير التكبير\n              Text(\n                'التكبير: ${cameraState.currentZoom.toStringAsFixed(1)}x',\n                style: const TextStyle(color: Colors.white, fontSize: 14),\n              ),\n              Slider(\n                value: cameraState.currentZoom,\n                min: cameraState.minZoom,\n                max: cameraState.maxZoom,\n                divisions: 20,\n                activeColor: AppConstants.accentColor,\n                inactiveColor: Colors.white.withOpacity(0.3),\n                onChanged: (value) {\n                  ref.read(cameraServiceProvider.notifier).setZoom(value);\n                },\n              ),\n              \n              const SizedBox(height: 8),\n              \n              // تبديل التركيز التلقائي\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  const Text(\n                    'التركيز التلقائي',\n                    style: TextStyle(color: Colors.white, fontSize: 14),\n                  ),\n                  Switch(\n                    value: cameraState.settings.enableAutoFocus,\n                    activeColor: AppConstants.accentColor,\n                    onChanged: (value) {\n                      final newSettings = cameraState.settings.copyWith(\n                        enableAutoFocus: value,\n                      );\n                      ref.read(cameraServiceProvider.notifier).updateSettings(newSettings);\n                    },\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n  \n  // طبقة التحليل المباشر\n  Widget _buildAnalysisOverlay(CameraServiceState cameraState) {\n    final result = cameraState.liveAnalysisResult!;\n    \n    return Positioned(\n      top: 120,\n      left: 16,\n      child: Container(\n        padding: const EdgeInsets.all(12),\n        decoration: BoxDecoration(\n          color: Colors.black.withOpacity(0.8),\n          borderRadius: BorderRadius.circular(12),\n          border: Border.all(\n            color: AppConstants.successColor,\n            width: 2,\n          ),\n        ),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            const Text(\n              'نتائج التحليل المباشر',\n              style: TextStyle(\n                color: Colors.white,\n                fontSize: 14,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Text(\n              'العدد: ${result.spermCount}',\n              style: const TextStyle(color: Colors.white, fontSize: 12),\n            ),\n            Text(\n              'الحركة: ${result.motility.toStringAsFixed(1)}%',\n              style: const TextStyle(color: Colors.white, fontSize: 12),\n            ),\n            Text(\n              'التركيز: ${result.concentration.toStringAsFixed(1)} M/ml',\n              style: const TextStyle(color: Colors.white, fontSize: 12),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n  \n  // طبقة التحكم والمعلومات\n  Widget _buildControlsOverlay(CameraServiceState cameraState, AppLocalizations loc) {\n    return Container(); // يمكن إضافة معلومات إضافية هنا\n  }\n  \n  // التقاط صورة\n  Future<void> _takePicture() async {\n    final imagePath = await ref.read(cameraServiceProvider.notifier).takePicture();\n    \n    if (imagePath != null && mounted) {\n      // إظهار رسالة نجاح\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: const Text('تم التقاط الصورة بنجاح'),\n          backgroundColor: AppConstants.successColor,\n          action: SnackBarAction(\n            label: 'تحليل',\n            textColor: Colors.white,\n            onPressed: () {\n              // الانتقال لشاشة التحليل\n              _analyzeImage(imagePath);\n            },\n          ),\n        ),\n      );\n    }\n  }\n  \n  // بدء تسجيل الفيديو\n  Future<void> _startVideoRecording() async {\n    await ref.read(cameraServiceProvider.notifier).startVideoRecording();\n  }\n  \n  // إيقاف تسجيل الفيديو\n  Future<void> _stopVideoRecording() async {\n    final videoPath = await ref.read(cameraServiceProvider.notifier).stopVideoRecording();\n    \n    if (videoPath != null && mounted) {\n      // إظهار رسالة نجاح\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: const Text('تم حفظ الفيديو بنجاح'),\n          backgroundColor: AppConstants.successColor,\n          action: SnackBarAction(\n            label: 'تحليل',\n            textColor: Colors.white,\n            onPressed: () {\n              // الانتقال لشاشة التحليل\n              _analyzeVideo(videoPath);\n            },\n          ),\n        ),\n      );\n    }\n  }\n  \n  // تحليل الصورة\n  Future<void> _analyzeImage(String imagePath) async {\n    try {\n      final file = File(imagePath);\n      await ref.read(analysisServiceProvider.notifier).analyzeFile(file);\n      \n      if (mounted) {\n        Navigator.of(context).pushNamed('/results');\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('فشل في التحليل: $e'),\n            backgroundColor: AppConstants.errorColor,\n          ),\n        );\n      }\n    }\n  }\n  \n  // تحليل الفيديو\n  Future<void> _analyzeVideo(String videoPath) async {\n    try {\n      final file = File(videoPath);\n      await ref.read(analysisServiceProvider.notifier).analyzeFile(file);\n      \n      if (mounted) {\n        Navigator.of(context).pushNamed('/results');\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('فشل في التحليل: $e'),\n            backgroundColor: AppConstants.errorColor,\n          ),\n        );\n      }\n    }\n  }\n  \n  // تبديل رؤية عناصر التحكم\n  void _toggleControlsVisibility() {\n    setState(() {\n      _showControls = !_showControls;\n      if (_showControls) {\n        _overlayController.forward();\n      } else {\n        _overlayController.reverse();\n        _showSettings = false;\n      }\n    });\n  }\n  \n  // إظهار مؤشر التركيز\n  void _showFocusIndicator(Offset position) {\n    // يمكن إضافة animation للتركيز هنا\n  }\n  \n  // تنسيق مدة الوقت\n  String _formatDuration(Duration duration) {\n    String twoDigits(int n) => n.toString().padLeft(2, \"0\");\n    String twoDigitMinutes = twoDigits(duration.inMinutes.remainder(60));\n    String twoDigitSeconds = twoDigits(duration.inSeconds.remainder(60));\n    return \"$twoDigitMinutes:$twoDigitSeconds\";\n  }\n}