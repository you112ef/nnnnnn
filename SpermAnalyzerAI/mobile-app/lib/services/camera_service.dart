import 'dart:io';\nimport 'dart:typed_data';\nimport 'package:flutter/material.dart';\nimport 'package:camera/camera.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:permission_handler/permission_handler.dart';\nimport 'package:path_provider/path_provider.dart';\nimport 'package:path/path.dart' as path;\nimport '../models/analysis_result.dart';\nimport '../services/analysis_service.dart';\n\n// حالة الكاميرا\nenum CameraState {\n  notInitialized,\n  initializing,\n  ready,\n  error,\n  capturing,\n  recording,\n}\n\n// إعدادات الكاميرا\nclass CameraSettings {\n  final ResolutionPreset resolution;\n  final bool enableAudio;\n  final ImageFormat imageFormat;\n  final int videoQuality;\n  final Duration maxRecordingDuration;\n  final bool enableFlash;\n  final bool enableAutoFocus;\n  final double exposureOffset;\n  final double zoomLevel;\n  \n  const CameraSettings({\n    this.resolution = ResolutionPreset.high,\n    this.enableAudio = false,\n    this.imageFormat = ImageFormat.jpeg,\n    this.videoQuality = 1,\n    this.maxRecordingDuration = const Duration(seconds: 30),\n    this.enableFlash = false,\n    this.enableAutoFocus = true,\n    this.exposureOffset = 0.0,\n    this.zoomLevel = 1.0,\n  });\n  \n  CameraSettings copyWith({\n    ResolutionPreset? resolution,\n    bool? enableAudio,\n    ImageFormat? imageFormat,\n    int? videoQuality,\n    Duration? maxRecordingDuration,\n    bool? enableFlash,\n    bool? enableAutoFocus,\n    double? exposureOffset,\n    double? zoomLevel,\n  }) {\n    return CameraSettings(\n      resolution: resolution ?? this.resolution,\n      enableAudio: enableAudio ?? this.enableAudio,\n      imageFormat: imageFormat ?? this.imageFormat,\n      videoQuality: videoQuality ?? this.videoQuality,\n      maxRecordingDuration: maxRecordingDuration ?? this.maxRecordingDuration,\n      enableFlash: enableFlash ?? this.enableFlash,\n      enableAutoFocus: enableAutoFocus ?? this.enableAutoFocus,\n      exposureOffset: exposureOffset ?? this.exposureOffset,\n      zoomLevel: zoomLevel ?? this.zoomLevel,\n    );\n  }\n}\n\n// حالة خدمة الكاميرا\nclass CameraServiceState {\n  final CameraState state;\n  final CameraController? controller;\n  final List<CameraDescription> cameras;\n  final int selectedCameraIndex;\n  final CameraSettings settings;\n  final String? errorMessage;\n  final bool isRecording;\n  final Duration recordingDuration;\n  final bool isFlashOn;\n  final double currentZoom;\n  final double minZoom;\n  final double maxZoom;\n  final bool isLiveAnalysisEnabled;\n  final AnalysisResult? liveAnalysisResult;\n  \n  const CameraServiceState({\n    this.state = CameraState.notInitialized,\n    this.controller,\n    this.cameras = const [],\n    this.selectedCameraIndex = 0,\n    this.settings = const CameraSettings(),\n    this.errorMessage,\n    this.isRecording = false,\n    this.recordingDuration = Duration.zero,\n    this.isFlashOn = false,\n    this.currentZoom = 1.0,\n    this.minZoom = 1.0,\n    this.maxZoom = 8.0,\n    this.isLiveAnalysisEnabled = false,\n    this.liveAnalysisResult,\n  });\n  \n  CameraServiceState copyWith({\n    CameraState? state,\n    CameraController? controller,\n    List<CameraDescription>? cameras,\n    int? selectedCameraIndex,\n    CameraSettings? settings,\n    String? errorMessage,\n    bool? isRecording,\n    Duration? recordingDuration,\n    bool? isFlashOn,\n    double? currentZoom,\n    double? minZoom,\n    double? maxZoom,\n    bool? isLiveAnalysisEnabled,\n    AnalysisResult? liveAnalysisResult,\n  }) {\n    return CameraServiceState(\n      state: state ?? this.state,\n      controller: controller ?? this.controller,\n      cameras: cameras ?? this.cameras,\n      selectedCameraIndex: selectedCameraIndex ?? this.selectedCameraIndex,\n      settings: settings ?? this.settings,\n      errorMessage: errorMessage,\n      isRecording: isRecording ?? this.isRecording,\n      recordingDuration: recordingDuration ?? this.recordingDuration,\n      isFlashOn: isFlashOn ?? this.isFlashOn,\n      currentZoom: currentZoom ?? this.currentZoom,\n      minZoom: minZoom ?? this.minZoom,\n      maxZoom: maxZoom ?? this.maxZoom,\n      isLiveAnalysisEnabled: isLiveAnalysisEnabled ?? this.isLiveAnalysisEnabled,\n      liveAnalysisResult: liveAnalysisResult ?? this.liveAnalysisResult,\n    );\n  }\n  \n  bool get isReady => state == CameraState.ready && controller != null;\n  bool get hasError => state == CameraState.error;\n  bool get isInitializing => state == CameraState.initializing;\n  bool get canTakePhoto => isReady && !isRecording;\n  bool get canRecordVideo => isReady;\n  bool get hasMultipleCameras => cameras.length > 1;\n}\n\n// موفر خدمة الكاميرا\nfinal cameraServiceProvider = StateNotifierProvider<CameraService, CameraServiceState>(\n  (ref) => CameraService(ref),\n);\n\n// خدمة الكاميرا\nclass CameraService extends StateNotifier<CameraServiceState> {\n  final Ref _ref;\n  CameraController? _controller;\n  \n  CameraService(this._ref) : super(const CameraServiceState());\n  \n  // تهيئة خدمة الكاميرا\n  Future<void> initialize() async {\n    try {\n      state = state.copyWith(state: CameraState.initializing);\n      \n      // طلب أذونات الكاميرا\n      final hasPermission = await _requestCameraPermission();\n      if (!hasPermission) {\n        state = state.copyWith(\n          state: CameraState.error,\n          errorMessage: 'إذن الكاميرا مطلوب للمتابعة',\n        );\n        return;\n      }\n      \n      // الحصول على قائمة الكاميرات\n      final cameras = await availableCameras();\n      if (cameras.isEmpty) {\n        state = state.copyWith(\n          state: CameraState.error,\n          errorMessage: 'لا توجد كاميرات متاحة',\n        );\n        return;\n      }\n      \n      state = state.copyWith(cameras: cameras);\n      \n      // تهيئة الكاميرا الافتراضية\n      await _initializeCamera(0);\n      \n    } catch (e) {\n      state = state.copyWith(\n        state: CameraState.error,\n        errorMessage: 'فشل في تهيئة الكاميرا: $e',\n      );\n    }\n  }\n  \n  // تهيئة كاميرا محددة\n  Future<void> _initializeCamera(int cameraIndex) async {\n    try {\n      // إغلاق الكاميرا السابقة إن وجدت\n      await _disposeController();\n      \n      final camera = state.cameras[cameraIndex];\n      _controller = CameraController(\n        camera,\n        state.settings.resolution,\n        enableAudio: state.settings.enableAudio,\n        imageFormatGroup: ImageFormatGroup.jpeg,\n      );\n      \n      await _controller!.initialize();\n      \n      // تطبيق الإعدادات\n      await _applySettings();\n      \n      // الحصول على حدود التكبير\n      final minZoom = await _controller!.getMinZoomLevel();\n      final maxZoom = await _controller!.getMaxZoomLevel();\n      \n      state = state.copyWith(\n        state: CameraState.ready,\n        controller: _controller,\n        selectedCameraIndex: cameraIndex,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        currentZoom: 1.0,\n        errorMessage: null,\n      );\n      \n    } catch (e) {\n      state = state.copyWith(\n        state: CameraState.error,\n        errorMessage: 'فشل في تهيئة الكاميرا: $e',\n      );\n    }\n  }\n  \n  // تطبيق إعدادات الكاميرا\n  Future<void> _applySettings() async {\n    if (_controller == null || !_controller!.value.isInitialized) return;\n    \n    try {\n      // تطبيق وضع التركيز\n      if (state.settings.enableAutoFocus) {\n        await _controller!.setFocusMode(FocusMode.auto);\n      }\n      \n      // تطبيق الفلاش\n      await _controller!.setFlashMode(\n        state.settings.enableFlash ? FlashMode.torch : FlashMode.off,\n      );\n      \n      // تطبيق التعرض\n      await _controller!.setExposureOffset(state.settings.exposureOffset);\n      \n      // تطبيق التكبير\n      await _controller!.setZoomLevel(state.settings.zoomLevel);\n      \n    } catch (e) {\n      print('فشل في تطبيق إعدادات الكاميرا: $e');\n    }\n  }\n  \n  // طلب إذن الكاميرا\n  Future<bool> _requestCameraPermission() async {\n    final status = await Permission.camera.request();\n    return status == PermissionStatus.granted;\n  }\n  \n  // التقاط صورة\n  Future<String?> takePicture() async {\n    if (!state.canTakePhoto) return null;\n    \n    try {\n      state = state.copyWith(state: CameraState.capturing);\n      \n      final image = await _controller!.takePicture();\n      \n      // حفظ الصورة في مجلد التطبيق\n      final directory = await getApplicationDocumentsDirectory();\n      final timestamp = DateTime.now().millisecondsSinceEpoch;\n      final fileName = 'sperm_analysis_$timestamp.jpg';\n      final savedPath = path.join(directory.path, fileName);\n      \n      await File(image.path).copy(savedPath);\n      \n      state = state.copyWith(state: CameraState.ready);\n      \n      // تشغيل التحليل إذا كان مفعلاً\n      if (state.isLiveAnalysisEnabled) {\n        _analyzeCapturedImage(savedPath);\n      }\n      \n      return savedPath;\n      \n    } catch (e) {\n      state = state.copyWith(\n        state: CameraState.error,\n        errorMessage: 'فشل في التقاط الصورة: $e',\n      );\n      return null;\n    }\n  }\n  \n  // بدء تسجيل الفيديو\n  Future<void> startVideoRecording() async {\n    if (!state.canRecordVideo) return;\n    \n    try {\n      await _controller!.startVideoRecording();\n      \n      state = state.copyWith(\n        state: CameraState.recording,\n        isRecording: true,\n        recordingDuration: Duration.zero,\n      );\n      \n      // بدء عداد الوقت\n      _startRecordingTimer();\n      \n    } catch (e) {\n      state = state.copyWith(\n        state: CameraState.error,\n        errorMessage: 'فشل في بدء التسجيل: $e',\n      );\n    }\n  }\n  \n  // إيقاف تسجيل الفيديو\n  Future<String?> stopVideoRecording() async {\n    if (!state.isRecording) return null;\n    \n    try {\n      final file = await _controller!.stopVideoRecording();\n      \n      // حفظ الفيديو في مجلد التطبيق\n      final directory = await getApplicationDocumentsDirectory();\n      final timestamp = DateTime.now().millisecondsSinceEpoch;\n      final fileName = 'sperm_video_$timestamp.mp4';\n      final savedPath = path.join(directory.path, fileName);\n      \n      await File(file.path).copy(savedPath);\n      \n      state = state.copyWith(\n        state: CameraState.ready,\n        isRecording: false,\n        recordingDuration: Duration.zero,\n      );\n      \n      return savedPath;\n      \n    } catch (e) {\n      state = state.copyWith(\n        state: CameraState.error,\n        errorMessage: 'فشل في إيقاف التسجيل: $e',\n        isRecording: false,\n      );\n      return null;\n    }\n  }\n  \n  // تبديل الكاميرا\n  Future<void> switchCamera() async {\n    if (!state.hasMultipleCameras) return;\n    \n    final nextIndex = (state.selectedCameraIndex + 1) % state.cameras.length;\n    await _initializeCamera(nextIndex);\n  }\n  \n  // تبديل الفلاش\n  Future<void> toggleFlash() async {\n    if (_controller == null) return;\n    \n    try {\n      final newFlashState = !state.isFlashOn;\n      await _controller!.setFlashMode(\n        newFlashState ? FlashMode.torch : FlashMode.off,\n      );\n      \n      state = state.copyWith(isFlashOn: newFlashState);\n      \n    } catch (e) {\n      print('فشل في تبديل الفلاش: $e');\n    }\n  }\n  \n  // تعديل التكبير\n  Future<void> setZoom(double zoom) async {\n    if (_controller == null) return;\n    \n    try {\n      final clampedZoom = zoom.clamp(state.minZoom, state.maxZoom);\n      await _controller!.setZoomLevel(clampedZoom);\n      \n      state = state.copyWith(currentZoom: clampedZoom);\n      \n    } catch (e) {\n      print('فشل في تعديل التكبير: $e');\n    }\n  }\n  \n  // تفعيل/إلغاء التحليل المباشر\n  void toggleLiveAnalysis() {\n    state = state.copyWith(\n      isLiveAnalysisEnabled: !state.isLiveAnalysisEnabled,\n    );\n  }\n  \n  // تحليل الصورة الملتقطة\n  Future<void> _analyzeCapturedImage(String imagePath) async {\n    try {\n      final analysisService = _ref.read(analysisServiceProvider.notifier);\n      await analysisService.analyzeFile(File(imagePath));\n      \n      // تحديث نتيجة التحليل المباشر\n      final analysisState = _ref.read(analysisServiceProvider);\n      if (analysisState.result != null) {\n        state = state.copyWith(\n          liveAnalysisResult: analysisState.result,\n        );\n      }\n      \n    } catch (e) {\n      print('فشل في التحليل المباشر: $e');\n    }\n  }\n  \n  // بدء عداد وقت التسجيل\n  void _startRecordingTimer() {\n    Stream.periodic(const Duration(seconds: 1)).listen((tick) {\n      if (state.isRecording) {\n        final newDuration = Duration(seconds: tick + 1);\n        state = state.copyWith(recordingDuration: newDuration);\n        \n        // إيقاف التسجيل عند الوصول للحد الأقصى\n        if (newDuration >= state.settings.maxRecordingDuration) {\n          stopVideoRecording();\n        }\n      }\n    }).cancel;\n  }\n  \n  // تحديث إعدادات الكاميرا\n  Future<void> updateSettings(CameraSettings newSettings) async {\n    state = state.copyWith(settings: newSettings);\n    await _applySettings();\n  }\n  \n  // التركيز على نقطة محددة\n  Future<void> focusOnPoint(Offset point) async {\n    if (_controller == null) return;\n    \n    try {\n      await _controller!.setFocusPoint(point);\n      await _controller!.setExposurePoint(point);\n    } catch (e) {\n      print('فشل في التركيز: $e');\n    }\n  }\n  \n  // إعادة تعيين الكاميرا\n  Future<void> reset() async {\n    await _disposeController();\n    state = const CameraServiceState();\n  }\n  \n  // تنظيف الموارد\n  Future<void> _disposeController() async {\n    if (_controller != null) {\n      if (_controller!.value.isInitialized) {\n        await _controller!.dispose();\n      }\n      _controller = null;\n    }\n  }\n  \n  @override\n  void dispose() {\n    _disposeController();\n    super.dispose();\n  }\n}\n\n// موفر حالة أذونات الكاميرا\nfinal cameraPermissionProvider = FutureProvider<PermissionStatus>((ref) async {\n  return await Permission.camera.status;\n});\n\n// موفر قائمة الكاميرات المتاحة\nfinal availableCamerasProvider = FutureProvider<List<CameraDescription>>((ref) async {\n  try {\n    return await availableCameras();\n  } catch (e) {\n    return [];\n  }\n});\n\n// موفر إعدادات الكاميرا\nfinal cameraSettingsProvider = StateProvider<CameraSettings>((ref) {\n  return const CameraSettings();\n});