import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n// موفر اتجاه النص\nfinal textDirectionProvider = Provider<TextDirection>((ref) {\n  final locale = ref.watch(localizationProvider);\n  return locale.languageCode == 'ar' ? TextDirection.rtl : TextDirection.ltr;\n});\n\n// موفر التصميم العربي\nfinal isArabicProvider = Provider<bool>((ref) {\n  final locale = ref.watch(localizationProvider);\n  return locale.languageCode == 'ar';\n});\n\n// Widget مساعد لدعم RTL\nclass RTLSupport extends ConsumerWidget {\n  final Widget child;\n  \n  const RTLSupport({super.key, required this.child});\n  \n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final textDirection = ref.watch(textDirectionProvider);\n    \n    return Directionality(\n      textDirection: textDirection,\n      child: child,\n    );\n  }\n}\n\n// Widget للنص المتجاوب مع الاتجاه\nclass ResponsiveText extends ConsumerWidget {\n  final String text;\n  final TextStyle? style;\n  final TextAlign? textAlign;\n  final int? maxLines;\n  final TextOverflow? overflow;\n  \n  const ResponsiveText(\n    this.text, {\n    super.key,\n    this.style,\n    this.textAlign,\n    this.maxLines,\n    this.overflow,\n  });\n  \n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final isArabic = ref.watch(isArabicProvider);\n    \n    return Text(\n      text,\n      style: style?.copyWith(\n        fontFamily: isArabic ? 'Cairo' : null,\n      ),\n      textAlign: textAlign ?? (isArabic ? TextAlign.right : TextAlign.left),\n      maxLines: maxLines,\n      overflow: overflow,\n      textDirection: isArabic ? TextDirection.rtl : TextDirection.ltr,\n    );\n  }\n}\n\n// Widget للحشو المتجاوب مع الاتجاه\nclass ResponsivePadding extends ConsumerWidget {\n  final Widget child;\n  final double? left;\n  final double? right;\n  final double? top;\n  final double? bottom;\n  final double? start;\n  final double? end;\n  \n  const ResponsivePadding({\n    super.key,\n    required this.child,\n    this.left,\n    this.right,\n    this.top,\n    this.bottom,\n    this.start,\n    this.end,\n  });\n  \n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final isArabic = ref.watch(isArabicProvider);\n    \n    double leftPadding = left ?? 0;\n    double rightPadding = right ?? 0;\n    \n    if (start != null) {\n      if (isArabic) {\n        rightPadding = start!;\n      } else {\n        leftPadding = start!;\n      }\n    }\n    \n    if (end != null) {\n      if (isArabic) {\n        leftPadding = end!;\n      } else {\n        rightPadding = end!;\n      }\n    }\n    \n    return Padding(\n      padding: EdgeInsets.only(\n        left: leftPadding,\n        right: rightPadding,\n        top: top ?? 0,\n        bottom: bottom ?? 0,\n      ),\n      child: child,\n    );\n  }\n}\n\n// Widget للصف المتجاوب مع الاتجاه\nclass ResponsiveRow extends ConsumerWidget {\n  final List<Widget> children;\n  final MainAxisAlignment mainAxisAlignment;\n  final CrossAxisAlignment crossAxisAlignment;\n  final MainAxisSize mainAxisSize;\n  \n  const ResponsiveRow({\n    super.key,\n    required this.children,\n    this.mainAxisAlignment = MainAxisAlignment.start,\n    this.crossAxisAlignment = CrossAxisAlignment.center,\n    this.mainAxisSize = MainAxisSize.max,\n  });\n  \n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final isArabic = ref.watch(isArabicProvider);\n    \n    // عكس ترتيب العناصر في العربية\n    final adjustedChildren = isArabic ? children.reversed.toList() : children;\n    \n    // تعديل محاذاة العناصر\n    MainAxisAlignment adjustedAlignment = mainAxisAlignment;\n    if (isArabic) {\n      switch (mainAxisAlignment) {\n        case MainAxisAlignment.start:\n          adjustedAlignment = MainAxisAlignment.end;\n          break;\n        case MainAxisAlignment.end:\n          adjustedAlignment = MainAxisAlignment.start;\n          break;\n        default:\n          adjustedAlignment = mainAxisAlignment;\n      }\n    }\n    \n    return Row(\n      mainAxisAlignment: adjustedAlignment,\n      crossAxisAlignment: crossAxisAlignment,\n      mainAxisSize: mainAxisSize,\n      textDirection: isArabic ? TextDirection.rtl : TextDirection.ltr,\n      children: adjustedChildren,\n    );\n  }\n}\n\n// إمتداد للسياق لسهولة الوصول للترجمة\nextension LocalizationExtension on BuildContext {\n  AppLocalizations get loc {\n    return AppLocalizations.of(this);\n  }\n  \n  bool get isArabic {\n    return Localizations.localeOf(this).languageCode == 'ar';\n  }\n  \n  TextDirection get textDirection {\n    return isArabic ? TextDirection.rtl : TextDirection.ltr;\n  }\n}\n\n// دالة مساعدة للحصول على اتجاه النص\nTextDirection getTextDirection(String languageCode) {\n  return languageCode == 'ar' ? TextDirection.rtl : TextDirection.ltr;\n}\n\n// دالة مساعدة للحصول على الخط المناسب\nString getFontFamily(String languageCode) {\n  return languageCode == 'ar' ? 'Cairo' : 'Roboto';\n}\n\n// دالة مساعدة لتعديل الحشو حسب الاتجاه\nEdgeInsets getDirectionalPadding({\n  required bool isRTL,\n  double start = 0,\n  double end = 0,\n  double top = 0,\n  double bottom = 0,\n}) {\n  return EdgeInsets.only(\n    left: isRTL ? end : start,\n    right: isRTL ? start : end,\n    top: top,\n    bottom: bottom,\n  );\n}\n\n// دالة مساعدة لتعديل الهامش حسب الاتجاه\nEdgeInsets getDirectionalMargin({\n  required bool isRTL,\n  double start = 0,\n  double end = 0,\n  double top = 0,\n  double bottom = 0,\n}) {\n  return getDirectionalPadding(\n    isRTL: isRTL,\n    start: start,\n    end: end,\n    top: top,\n    bottom: bottom,\n  );\n}\n\n// دالة لتعديل محاذاة النص\nTextAlign getDirectionalTextAlign({\n  required bool isRTL,\n  TextAlign? align,\n}) {\n  if (align == null) {\n    return isRTL ? TextAlign.right : TextAlign.left;\n  }\n  \n  switch (align) {\n    case TextAlign.start:\n      return isRTL ? TextAlign.right : TextAlign.left;\n    case TextAlign.end:\n      return isRTL ? TextAlign.left : TextAlign.right;\n    case TextAlign.left:\n      return isRTL ? TextAlign.right : TextAlign.left;\n    case TextAlign.right:\n      return isRTL ? TextAlign.left : TextAlign.right;\n    default:\n      return align;\n  }\n}\n\n// دالة لتعديل الأيقونات حسب الاتجاه\nIconData getDirectionalIcon({\n  required bool isRTL,\n  required IconData ltrIcon,\n  required IconData rtlIcon,\n}) {\n  return isRTL ? rtlIcon : ltrIcon;\n}\n\n// تعداد للاتجاهات المدعومة\nenum SupportedDirection {\n  ltr,\n  rtl,\n  auto,\n}\n\n// فئة لإعدادات الاتجاه\nclass DirectionSettings {\n  final SupportedDirection direction;\n  final String fontFamily;\n  final TextAlign defaultTextAlign;\n  \n  const DirectionSettings({\n    required this.direction,\n    required this.fontFamily,\n    required this.defaultTextAlign,\n  });\n  \n  static DirectionSettings fromLanguageCode(String languageCode) {\n    final isRTL = languageCode == 'ar';\n    \n    return DirectionSettings(\n      direction: isRTL ? SupportedDirection.rtl : SupportedDirection.ltr,\n      fontFamily: getFontFamily(languageCode),\n      defaultTextAlign: isRTL ? TextAlign.right : TextAlign.left,\n    );\n  }\n}\n\n// موفر إعدادات الاتجاه\nfinal directionSettingsProvider = Provider<DirectionSettings>((ref) {\n  final locale = ref.watch(localizationProvider);\n  return DirectionSettings.fromLanguageCode(locale.languageCode);\n});